{"version":3,"sources":["components/Apexchart.jsx","components/Nav.jsx","components/App.js","serviceWorker.js","index.js"],"names":["LineGraph","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","options","chart","id","xaxis","categories","dateArr","yaxis","labels","formatter","val","index","toFixed","tooltip","y","value","_ref","series","seriesIndex","dataPointIndex","w","name","data","intArr","react_default","a","createElement","className","key","react_apexcharts_min_default","type","width","height","Component","Nav","deposit","ethAmount","bgcAmount","withdraw","web3","Web3","window","ethereum","class","onClick","e","utils","fromWei","toString","Math","round","parseFloat","App","componentDidMount","asyncToGenerator","regenerator_default","mark","_callee","wrap","_context","prev","next","loadBlockchain","arrayCreator","stop","_callee2","netId","account","cerebro","bgc","amountOfBgc","amountOfEth","depositTime","_context2","enable","eth","net","getId","sent","getAccounts","setState","Cerebro","networks","Contract","abi","address","Bgc","methods","balanceOf","depositEth","alert","amount","send","from","inicio","startDate","Date","console","log","getTime","endDate","arrays","start","end","arr","Array","arrInt","intIni","dt","push","toLocaleDateString","unshift","setDate","getDate","first","second","getDateArray","refrescar","components_Nav","Apexchart","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70a43c92.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\n\r\nclass LineGraph extends Component {\r\n\r\n    /*componentDidMount = async () => {\r\n        this.setState(prevState => ({\r\n            options: {\r\n              ...prevState.options,          \r\n              xaxis: {                     \r\n                ...prevState.options.xaxis,   \r\n                categories: this.props.dateArr         \r\n            }\r\n            }\r\n          }))\r\n      }*/\r\n\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.state = {\r\n        options: {\r\n          chart: {\r\n            id: \"basic-line\"\r\n          },\r\n          xaxis: {\r\n            categories: this.props.dateArr\r\n          },\r\n          yaxis: {\r\n            labels: {\r\n              formatter: function(val, index) {\r\n                return val.toFixed(0);\r\n              }\r\n            }\r\n          },\r\n          tooltip: {\r\n            y: {\r\n              formatter: function(value, { series, seriesIndex, dataPointIndex, w }) {\r\n                return value\r\n              }\r\n            }\r\n          }\r\n        },\r\n        series: [\r\n          {\r\n            name: \"series-1\",\r\n            data: this.props.intArr\r\n          }\r\n        ]\r\n      };\r\n    }\r\n        render () {\r\n        return (\r\n          <div className=\"app\">\r\n            <div className=\"row\">\r\n              <div className=\"mixed-chart\" key={this.props.key}>\r\n                <Chart\r\n                  options={this.state.options}\r\n                  series={this.state.series}\r\n                  type=\"line\"\r\n                  width=\"1100\"\r\n                  height = \"500\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        )\r\n        }\r\n      }\r\n\r\n  export default LineGraph;","import React from 'react'\r\nimport Web3 from 'web3'\r\nimport './App.css'\r\n\r\nconst Nav = ({deposit, ethAmount, bgcAmount, withdraw, key}) => {\r\n\r\n    const web3 = new Web3(window.ethereum)\r\n    \r\n    return (\r\n        <nav class = \"nav\">\r\n        <div className = \"box box-rem\" key={key}>\r\n          <h1>Welcome to BGC staker</h1>\r\n          <div class = 'flex-btn flex-padding'>\r\n          <button class = 'btn btn-lg btn-nav' onClick = {e => {\r\n                                            deposit()}}>Deposit</button>\r\n          <button class = 'btn btn-lg btn-nav' onClick = {e => {\r\n                                            withdraw()}}>Withdraw</button>\r\n          </div>\r\n          \r\n          </div>\r\n          <div className = \"box box-amounts\" key={key}>\r\n            <h5 className = 'text-h'>ETH deposited:</h5>\r\n            <h5 className = 'text-h'>{web3.utils.fromWei(ethAmount.toString(), 'Ether')}</h5>\r\n          </div>\r\n          <div className = \"box box-amounts\" key={key}>\r\n          <h5 className = 'text-h'>BGC earned:</h5>\r\n          <h5 className = 'text-h'>{Math.round(parseFloat(web3.utils.fromWei(bgcAmount.toString(), 'Gwei')))}</h5>\r\n          </div>\r\n        </nav>\r\n    )\r\n\r\n}\r\n\r\n\r\nexport default Nav","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport LineGraph from './Apexchart'\r\nimport Web3 from 'web3'\r\nimport Cerebro from '../abis/Cerebro.json'\r\nimport Bgc from '../abis/Bgc.json'\r\nimport Nav from './Nav.jsx'\r\n\r\n\r\nclass App extends Component {\r\n\r\n  //cargo todo en la app\r\n  componentDidMount = async () => {\r\n    await this.loadBlockchain()\r\n    this.arrayCreator()\r\n  }\r\n\r\n  //llamado a la blockchain\r\n  loadBlockchain = async () => {\r\n    if(typeof window.ethereum !== 'undefined') {\r\n         const web3 = new Web3(window.ethereum);\r\n         window.ethereum.enable()\r\n         const netId = await web3.eth.net.getId()\r\n         //console.log(netId)\r\n         const account = await web3.eth.getAccounts()\r\n         this.setState({account: account[0]})\r\n         //console.log(Cerebro.networks[netId].address)\r\n         if(Cerebro.networks[netId]) {\r\n          const cerebro = await web3.eth.Contract(Cerebro.abi, Cerebro.networks[netId].address)\r\n          const bgc = await web3.eth.Contract(Bgc.abi, Bgc.networks[netId].address)\r\n          const amountOfBgc = await bgc.methods.balanceOf(account.toString()).call()\r\n          const amountOfEth = await cerebro.methods.depositEth(account.toString()).call()\r\n          const depositTime = await cerebro.methods.depositTime(account.toString()).call()\r\n          this.setState({bgcAmount: parseFloat(amountOfBgc.toString())})\r\n          this.setState({ethAmount: parseFloat(amountOfEth.toString())})\r\n          this.setState({depositTime: depositTime.toString()})\r\n          this.setState({bgc})\r\n          this.setState({cerebro})\r\n         } else {\r\n           alert('connect to a different Blockchain')\r\n         }\r\n     } else {\r\n       window.alert('Please install metamask :)')\r\n     }\r\n    }\r\n\r\n    constructor(props){\r\n      super(props) \r\n        this.state = {\r\n          account: '',\r\n          ethAmount: 0,\r\n          bgcAmount: 0,\r\n          depositTime: '',\r\n          dateArr: [],\r\n          intArr: [], \r\n          key: 0,\r\n          refrescar: true\r\n    }\r\n  }\r\n\r\n  //depositar función de cerebro\r\n    deposit = (amount) => {\r\n      this.state.cerebro.methods.deposit().send({from: this.state.account, value: '1000000000000000000'})\r\n      //.once('transactionHash', (transactionHash) => {\r\n      //  //window.location.reload()\r\n      //  this.forceUpdate()\r\n      //})\r\n      //\r\n      //this.state.refrescar ? this.setState({refrescar:false}) : this.setState({refrescar: true})\r\n    }\r\n\r\n    //retirar función de cerebro\r\n    withdraw = (amount) => {\r\n      this.state.cerebro.methods.withdraw().send({from: this.state.account})\r\n      //.once('transactionHash', (transactionHash) => {\r\n      //  this.forceUpdate()\r\n      //})\r\n      //this.state.refrescar ? this.setState({refrescar:false}) : this.setState({refrescar: true})\r\n    }\r\n\r\n\r\n    //generador de fechas para el gráfico\r\n    arrayCreator = () => {\r\n      var inicio = parseFloat(this.state.depositTime *1000)\r\n      var startDate = new Date(inicio)\r\n      console.log(startDate.getTime())\r\n      var endDate = new Date()\r\n      //endDate.setDate(endDate.getDate() + 7)\r\n      console.log(endDate.getTime())\r\n\r\n      const getDateArray = (start, end) => {\r\n          var\r\n            arr = new Array(),\r\n            arrInt = new Array(),\r\n            intIni = (endDate - startDate)  * (parseFloat(this.state.ethAmount)/1000000000000000000) * 3 / 86400000,\r\n            dt = new Date(start);\r\n\r\n\r\n            \r\n          while (dt <= end) {\r\n              arr.push(dt.toLocaleDateString('en-US'));\r\n              arrInt.unshift(intIni)\r\n              dt.setDate(dt.getDate() + 1);\r\n              intIni = (endDate - dt)  * (parseFloat(this.state.ethAmount)/1000000000000000000) * 3 / 86400000\r\n          }\r\n        \r\n          console.log(arrInt)\r\n      return {\r\n        first: arr,\r\n        second: arrInt,\r\n      }\r\n    }\r\n\r\n  var arrays = getDateArray(startDate, endDate)\r\n\r\n    this.setState({dateArr: arrays.first})\r\n    this.setState({intArr: arrays.second})\r\n\r\n    this.setState({key: 1})\r\n    }\r\n    \r\n    \r\n//rendereo la app\r\n  render() {\r\n    console.log('render() method')\r\n    return (\r\n      <div>\r\n        <Nav deposit = {this.deposit}\r\n             ethAmount = {this.state.ethAmount}\r\n             bgcAmount = {this.state.bgcAmount}\r\n             withdraw = {this.withdraw}\r\n             key = {this.state.key}/>\r\n        <div className=\"box graph-size\">\r\n          { parseFloat(this.state.ethAmount) === 0 \r\n            ? <h2>No estas suscripto al staker</h2>\r\n            : <LineGraph dateArr = {this.state.dateArr}\r\n                     intArr = {this.state.intArr}\r\n                     key = {this.state.key}/>}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}